import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from '../../app/store';
import { addChat } from "./chatAPI";


const initialState:any={
    value:[],
    curChatId:'',
    titleStatus:false,
    tempTitle:'',
    status: 'idle',
}
export const inputMsgAsync = createAsyncThunk(
    'chat/msg',
     (amount: any) => {
      return  addChat(amount)
      // The value we return becomes the `fulfilled` action payload
      //  return response
    }
  );
export const chatSlice = createSlice({
    name: 'chat',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      //输入信息
      inputMsg: (state, action: any) => {
        let data=[{
          "role":"user",
          "content":action.payload
        }]
        state.value.push(...data)
      },
      insertMsg: (state, action) => {
        let data=[{
          "role":"assdistant",
          "content":action.payload
        }]
        state.value.push(...data)
      },
      refreshMsg:(state,action)=>{
        let data={
          "role":"assdistant",
          "content":action.payload
        }
        state.value[state.value.length-1]=data
      },
      //修改当前chatId
      changeCurChatId:(state,action)=>{
        state.curChatId=action.payload
      },
      //输入题目弹窗
      canTitle:(state,action)=>{
        state.titleStatus=action.payload
      },
      //修改题目
      reTitle:(state,action)=>{
        state.tempTitle=action.payload
      },
      //渲染当前对话展示
      renderMsg:(state,action)=>{
        state.value=action.payload
      }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      builder
        .addCase(inputMsgAsync.pending, (state) => {
          state.status = 'loading';
        })
        .addCase(inputMsgAsync.fulfilled, (state, action:any) => {
          state.status = 'idle';
          console.log(action.payload)
          // state.value.push(action.payload.data.choices[0].message)
        })
        .addCase(inputMsgAsync.rejected, (state) => {
          state.status = 'failed';
        });
    },
  });
  export const { inputMsg,changeCurChatId,renderMsg,reTitle ,canTitle,insertMsg,refreshMsg} = chatSlice.actions;

  export const selectChat = (state: RootState) => state.chat.value;
  export const titleStatus = (state: RootState) => state.chat.titleStatus;
  export const tempTitle = (state: RootState) => state.chat.tempTitle;
  export const curChatId = (state: RootState) => state.chat.curChatId ;
  export default chatSlice.reducer;