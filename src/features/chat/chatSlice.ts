import { createSlice } from "@reduxjs/toolkit";
import { RootState } from '../../app/store';



const initialState:any={
    value:[],
    curChatId:'',
    titleStatus:false,
    titleIsNew:false,
    tempTitle:'',
    status: false,
}

export const chatSlice = createSlice({
    name: 'chat',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
      /**用户输入信息
      * @param {string} action.payload 输入的内容
      */
      inputMsg: (state, action: any) => {
        let data=[{
          "role":"user",
          "content":action.payload
        }]
        state.value.push(...data)
      },
      /**插入返回的对话
       * @param {string} action.payload AI返回的内容
       */
      insertMsg: (state, action) => {
        let data=[{
          "role":"assdistant",
          "content":action.payload
        }]
        state.value.push(...data)
      },
      /**是否为新对话的title
       * 
       */
      ifTitleForNew:(state,action)=>{
        state.titleIsNew=action.payload
      },
      /**刷新流式传输对话
       * @param {string} action.payload 接收的消息
      */
      refreshMsg:(state,action)=>{
        let data={
          "role":"assdistant",
          "content":action.payload
        }
        state.value[state.value.length-1]=data
      },
      /**修改当前chatId
       * @param {string} action.payload 对话id
      */
      changeCurChatId:(state,action)=>{
        state.curChatId=action.payload
      },
      /**输入题目弹窗
      * @param {boolean} action.payload 显示状态
      */
      canTitle:(state,action)=>{
        state.titleStatus=action.payload
      },
      /**
      *修改标题
      * @param {string} action.payload 标题
      */
      reTitle:(state,action)=>{
        state.tempTitle=action.payload
      },
      /**
       * 渲染当前对话展示
       * @param {object} action.payload 当前对话记录
       */
      renderMsg:(state,action)=>{
        state.value=action.payload
      },
      /**是否正在等待回复
       * @param {boolean} action.payload 等待回复状态
       */
      stopInput:(state,action)=>{
        state.status=action.payload
      }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
      
    },
  });
  export const { inputMsg,changeCurChatId,renderMsg,reTitle,ifTitleForNew ,stopInput,canTitle,insertMsg,refreshMsg} = chatSlice.actions;

  export const selectChat = (state: RootState) => state.chat.value;
  export const inputStatus = (state: RootState) => state.chat.status;
  export const titleStatus = (state: RootState) => state.chat.titleStatus;
  export const titleIsNew = (state: RootState) => state.chat.titleIsNew;
  export const tempTitle = (state: RootState) => state.chat.tempTitle;
  export const curChatId = (state: RootState) => state.chat.curChatId ;
  export default chatSlice.reducer;